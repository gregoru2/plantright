<?php
/**
 * @file
 * Module code for quiz certificate
 */

/**
 * Implementation of hook_menu().
 */
function quiz_certificate_menu() {

  // Take quiz.
  $items['node/%node/certificate'] = array(
    'title' => 'My Certificate',
    'page callback' => 'quiz_certificate_my_certificate',
    'page arguments' => array(1),
    'access callback' => 'quiz_certificate_access_my_certificate',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );
  $items['node/%node/certificate/pdf'] = array(
    'title' => 'My Certificate',
    'page callback' => 'quiz_certificate_my_certificate_pdf',
    'page arguments' => array(1),
    'access callback' => 'quiz_certificate_access_my_certificate',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );
  $items['node/%node/results/%/certificate'] = array(
    'title' => 'Certificate',
    'page callback' => 'quiz_certificate_admin_certificate',
    'page arguments' => array(1, 3),
    'type' => MENU_CALLBACK,
    'access arguments' => array(1, 3),
    'access callback' => 'quiz_certificate_access_certificates',
  );
  $items['node/%node/results/%/certificate/pdf'] = array(
    'title' => 'Certificate',
    'page callback' => 'quiz_certificate_admin_certificate_pdf',
    'page arguments' => array(1, 3),
    'access arguments' => array(1, 3),
    'access callback' => 'quiz_certificate_access_certificates',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function quiz_certificate_perm() {
  return array(
    'view own quiz certificate',
    'view any quiz certificate',
    'view certificates for own quiz',
  );
}

/**
 * Helper function to determine if a user has access to view their certificate
 *
 * @param object $quiz
 *  The Quiz node
 */
function quiz_certificate_access_my_certificate($quiz) {
  global $user;
  if ($quiz->type !== 'quiz') {
    return FALSE;
  }

  if(!quiz_certificate_quiz_is_passed($user->uid, $quiz->nid)) {
    // No access to the page if user hasn't passed the quiz.
    return false;
  }

  if (user_access('view own quiz certificate')) {
    $answered = db_result(db_query_range(
      'SELECT 1
       FROM {quiz_node_results}
       WHERE nid = %d AND uid = %d AND is_evaluated = 1'
    , $quiz->nid, $user->uid, 0, 1));
    if ($answered) {
      return TRUE;
    }
  }
}

/**
 * Callback to certificate page.
 * @param type $quiz
 */
function quiz_certificate_my_certificate($quiz) {
  global $user;
  return quiz_certificate_create_certificate($quiz, $user);
}

function quiz_certificate_my_certificate_pdf($quiz) {
  global $user;
  return quiz_certificate_create_certificate_pdf($quiz, $user);
}

/**
 * Implementation of hook_form_alter().
 * @param type $form
 */
function quiz_certificate_form_alter(&$form, &$form_state, $form_id) {
  if($form_id != 'quiz_results_manage_results_form' || !user_access('view any quiz certificate') || !user_access('view certificates for own quiz')) {
    return;
  }

  foreach($form['table']['hover_menu'] as $key => &$item) {
    list($nid, $rid) = explode('-', $key);
    if (quiz_certificate_result_has_passed($nid, $rid)) {
      $item['#value'] = l(t('certificate'), 'node/' . $nid . '/results/' . $rid . '/certificate') . ' | ' . $item['#value'];
    }
  }
}

/**
 * Callback for quiz certificate page.
 */
function quiz_certificate_admin_certificate($quiz, $rid) {
  $uid = db_result(db_query('SELECT uid FROM {quiz_node_results} WHERE result_id = %d', $rid));
  $account = user_load($uid);
  return quiz_certificate_create_certificate($quiz, $account);
}

function quiz_certificate_admin_certificate_pdf($quiz, $rid) {
  $uid = db_result(db_query('SELECT uid FROM {quiz_node_results} WHERE result_id = %d', $rid));
  $account = user_load($uid);
  return quiz_certificate_create_certificate_pdf($quiz, $account);
}

function quiz_certificate_access_certificates($quiz, $rid = NULL) {
  global $user;

  if ($quiz->type !== 'quiz') {
    return FALSE;
  }

  // If rid is set we must make sure the result belongs to the quiz we are
  // viewing results for.
  if (isset($rid)) {
    $sql = 'SELECT qnr.nid
            FROM {quiz_node_results} qnr
            WHERE result_id = %d';
    $res = db_result(db_query($sql, $rid));
    if ($res != $quiz->nid) {
      return FALSE;
    }
  }

  if (!quiz_certificate_result_has_passed($quiz->nid, $rid)) {
    // This quiz result isn't passing, no access.
    return FALSE;
  }

  if (user_access('view any quiz certificate')) {
    return TRUE;
  }
  if (user_access('view certificates for own quiz') && $user->uid == $quiz->uid) {
    return TRUE;
  }
}

/**
 * Implemenation of hook_theme().
 */
function quiz_certificate_theme($existing, $type, $theme, $path) {
  return array(
    'quiz_certificate' => array(
      'template' => 'quiz-certificate',
      'arguments' => array('quiz' => NULL, 'account' => NULL, 'result' => NULL),
    ),
    'quiz_certificate_pdf' => array(
      'template' => 'quiz-certificate-pdf',
      'arguments' => array('certificate' => NULL, 'img' => NULL, 'directory' => NULL),
    ),
  );
}

function quiz_certificate_preprocess_quiz_certificate(&$vars) {
  $vars['title'] = $vars['quiz']->title;
  $vars['name'] = $vars['account']->name;
  $vars['date'] = format_date($vars['result']->time_end, 'custom', 'F j, Y');

  $vars['name'] = plantright_get_user_profile_name($vars['account']);
  $vars['download_url'] = filter_xss($_GET['q']) . '/pdf';
  $vars['download_link'] = l(t('Download Printable Certificate'), $vars['download_url']);
}

function quiz_certificate_preprocess_quiz_certificate_pdf(&$vars) {
  if (isset($_GET['html'])) {
    $vars['directory'] = '/' . drupal_get_path('module','quiz_certificate');
  }
  else {
    $vars['directory'] = dirname(__FILE__);
  }
  $vars['img'] = 'certificate-pdf.jpg';
}

/**
 * Helper function to determine if quiz has been passed.
 */
function quiz_certificate_result_has_passed($nid, $rid) {
  $result = db_fetch_array(db_query('SELECT nid, vid, uid FROM {quiz_node_results} WHERE result_id = %d', $rid));
  return quiz_is_passed($result['uid'], $nid, $result['vid']);
}

/**
 * Helper function to create the certificate.
 */
function quiz_certificate_create_certificate($quiz, $account, $result = NULL) {
  if (!$result) {
    $result = quiz_certificate_get_users_passing_result($quiz, $account);
  }

  drupal_add_css(drupal_get_path('module', 'quiz_certificate') . '/quiz_certificate.css');
  $output = theme('quiz_certificate', $quiz, $account, $result);
  return $output;
}

function quiz_certificate_create_certificate_pdf($quiz, $account, $result = NULL) {
  if (!$result) {
    $result = quiz_certificate_get_users_passing_result($quiz, $account);
  }

  $certificate = theme('quiz_certificate', $quiz, $account, $result);

  $output = theme('quiz_certificate_pdf', $certificate);
  $filename = 'certificate-' . strtolower(str_replace(array('/', ' '), '-', check_plain($quiz->title . '-' . $account->name))) . '.pdf';

  $directives = array(
    'set_paper' => array(
      'letter', 'landscape',
    ),
  );

  if (isset($_GET['html'])) {
    print $output;
  }
  else {
    dompdf_stream_pdf($output, $filename, $directives);
  }
  return;
}

function quiz_certificate_quiz_is_passed($uid, $nid) {
  $passed = db_result(db_query("SELECT COUNT(result_id) AS passed_count
    FROM {quiz_node_results} qnrs
    INNER JOIN {quiz_node_properties} USING (nid)
    WHERE qnrs.nid = %d AND qnrs.uid =%d AND score >= pass_rate",
    $nid, $uid
  ));
  // Force into boolean context.
  return ($passed !== FALSE && $passed > 0);
}

function quiz_certificate_get_users_passing_result($quiz, $account) {
  // No current
    $passing_score = '';
    // TODO: Alter query to sort by date passed
    $result = db_fetch_object(db_query("SELECT *
    FROM {quiz_node_results} qnrs
    INNER JOIN {quiz_node_properties} USING (nid)
    WHERE qnrs.nid = %d AND qnrs.uid =%d AND score >= pass_rate ORDER BY qnrs.time_end DESC LIMIT 1",
    $quiz->nid, $account->uid
    ));
    return $result;
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Hides the correct answer on the results page.
 * This can be moved into a seperate module if hiding the correct answer is
 * needed by not the certificate.
 */
function quiz_certificate_form_quiz_report_form_alter(&$form, &$form_state) {
  foreach($form as &$response) {
    if (isset($response['response']) && isset($response['response']['#value'])) {
      $response['response']['#value'] = preg_replace('/<img [^>]* alt="Should have chosen" [^>]* \/>/', '', $response['response']['#value']);
    }
  }
}
