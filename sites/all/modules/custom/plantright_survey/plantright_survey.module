<?php

/**
 * Contains customizations for the spring survey.
 * (Survey user profile customizations are in the Plantright module.)
 */
//todo: redirect from /spring-nursery-survey-submission

define('PLANTRIGHT_ROLES_SURVEY', 14);
define('PLANTRIGHT_ROLES_SURVEY_PASSED', 4);
define('PLANTRIGHT_QUIZ_NID_SURVEY', 332);
define('PLANTRIGHT_NODE_TYPE_NURSERY', 'nursery');
define('PLANTRIGHT_NODE_TYPE_SURVEY_DATA', 'survey_data');
define('PLANTRIGHT_NODE_TYPE_SURVEY_PHOTOS', 'survey_photos');
define('PLANTRIGHT_FLAG_SURVEY', 'nursery_flag');

/**
 * Implementation of hook_init.
 */
function plantright_survey_init() {
  drupal_add_js(drupal_get_path('module', 'plantright_survey') . '/js/plantright_survey.js');

  // Set nursery survey reports URLs to admin theme.
  global $custom_theme;
  if (strpos($_GET['q'], 'spring-nursery-survey/reports/') !== FALSE ||
      strpos($_GET['q'], 'spring-nursery-survey/claimed-list') !== FALSE) {
    $custom_theme = variable_get('admin_theme', 0);
  }
}

//function plantright_survey_perm() {
//  return array('');
//}

function plantright_survey_menu() {
  $items['spring-nursery-survey/reports/counties/build'] = array(
    'page callback' => 'plantright_survey_counties_build_page',
    'title' => 'Build County Tracking',
    'description' => 'Build the county tracking data for the report',
    'access arguments' => array('administer nodes'),
    'type' => MENU_CALLBACK,
  );
  $items['spring-nursery-survey/reports/volunteers/build'] = array(
    'page callback' => 'plantright_survey_volunteers_build_page',
    'title' => 'Build Volunteer Tracking',
    'description' => '',
    'access arguments' => array('administer nodes'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_flag().
 */
function plantright_survey_flag($action, $flag, $content_id, $account) {
  if ($action == 'flag' && $flag->name == 'nursery_flag') {
    global $user;
    watchdog('pr_survey', 'Nursery claimed by #' . $account->uid . ' from user logged in #' . $user->uid . ' nursery node #' . $content_id);
    $node = node_load($content_id);
    if ($node) {
      $member = array();
      $member['uid'] = $account->uid;
      array_push($node->field_surveying_user, $member);
      node_save($node);
    }
  }
  if ($action == 'unflag' && $flag->name == 'nursery_flag') {
    watchdog('pr_survey', 'Nursery unclaimed by #' . $account->uid . ' from user logged in #' . $user->uid . ' nursery node #' . $content_id);
    $node = node_load($content_id);
    if ($node) {
      $users = $node->field_surveying_user;
      $node->field_surveying_user = _plantright_survey_removeElementWithValue($users, "uid", $account->uid);
      node_save($node);
    }
  }
}

function _plantright_survey_removeElementWithValue($array, $key, $value) {
  foreach ($array as $subKey => $subArray) {
    if ($subArray[$key] == $value) {
      unset($array[$subKey]);
    }
  }
  return $array;
}

/**
 * Implementation of hook_nodeapi.
 */
function plantright_survey_nodeapi(&$node, $op, $a3, $a4) {
  if ($node->type == 'survey_photos') {
    switch ($op) {
      case 'insert':
      case 'update':
        $nursery_node_id = $node->field_store_name[0]['nid'];

        // Update the photo status of the nursery node.
        $nursery_node = node_load($nursery_node_id);
        if ($nursery_node && $nursery_node->field_photo_status[0]['value'] != 'submitted') {
          $nursery_node->field_photo_status[0]['value'] = 'submitted';
          node_save($nursery_node);
        }

        $prev_nursery_node_id = $node->prev_field_store_name;
        if ($prev_nursery_node_id && $nursery_node_id && $prev_nursery_node_id != $nursery_node_id) {
          // Remove from prev node. Check if other submitted first.
          $data_nodes = nodereferrer_referrers($prev_nursery_node_id, array('field_store_name'), array($node->type));
          if (count($data_nodes) <= 1) {
            $prev_nursery_node = node_load($prev_nursery_node_id);
            if ($prev_nursery_node) {
              $prev_nursery_node->field_photo_status[0]['value'] = 'none';
              node_save($prev_nursery_node);
            }
          }
        }
        break;
      case 'delete':
        $nursery_node_id = $node->field_store_name[0]['nid'];

        // Get all referring survey photos. If this is the only one,
        // set the nursery to none submitted.
        $nursery_node = node_load($nursery_node_id);
        if ($nursery_node) {
          $data_nodes = nodereferrer_referrers($nursery_node->nid, array('field_store_name'), array($node->type));

          if (count($data_nodes) <= 1 && $nursery_node->field_photo_status[0]['value'] != 'none') {
            $nursery_node->field_photo_status[0]['value'] = 'none';
            node_save($nursery_node);
          }
        }
        break;
    }
  }
  else if ($node->type == 'survey_data') {
    switch ($op) {
      case 'insert':
      case 'update':
        // Get referenced nursery.
        $nursery_node_id = $node->field_store_name[0]['nid'];

        // Update the photo status of the nursery node.
        $nursery_node = node_load($nursery_node_id);
        if ($nursery_node && $nursery_node->field_data_status[0]['value'] != 'submitted') {
          $nursery_node->field_data_status[0]['value'] = 'submitted';
          node_save($nursery_node);
        }

        $prev_nursery_node_id = $node->prev_field_store_name;
        if ($prev_nursery_node_id && $nursery_node_id && $prev_nursery_node_id != $nursery_node_id) {
          // Remove from prev node. Check if other submitted first.
          $data_nodes = nodereferrer_referrers($prev_nursery_node_id, array('field_store_name'), array($node->type));
          if (count($data_nodes) <= 1) {
            $prev_nursery_node = node_load($prev_nursery_node_id);
            if ($prev_nursery_node && $prev_nursery_node->field_data_status[0]['value'] != 'none') {
              $prev_nursery_node->field_data_status[0]['value'] = 'none';
              node_save($prev_nursery_node);
            }
          }
        }
        break;
      case 'delete':
        $nursery_node_id = $node->field_store_name[0]['nid'];

        // Get all referring survey data. If this is the only one,
        // set the nursery to none submitted.
        $nursery_node = node_load($nursery_node_id);
        if ($nursery_node) {
          $data_nodes = nodereferrer_referrers($nursery_node->nid, array('field_store_name'), array($node->type));

          if (count($data_nodes) <= 1 && $nursery_node->field_data_status[0]['value'] != 'none') {
            $nursery_node->field_data_status[0]['value'] = 'none';
            node_save($nursery_node);
          }
        }
        break;
    }
  }
}

/**
 * Implementation of hook_field_access().
 *
 * @param $op
 *   The operation to be performed. Possible values:
 *   - 'edit'
 *   - 'view'
 * @param $field
 *   The field on which the operation is to be performed.
 * @param $account
 *   The account to check.
 *   Note that this argument is optional to content_access(), but it is
 *   always passed to hook_field_access(), with current user if not supplied.
 *   This is an argument that was added to CCK in 6.x-2.2 release.
 * @param $node
 *   (optional) The node on which the operation is to be performed.
 *   Note that this argument is optional to content_access(), but it is
 *   always passed to hook_field_access(), with NULL if not supplied.
 *   This is an argument that was added to CCK in 6.x-2.5 release.
 *
 * @return
 *   FALSE if the operation is not allowed.
 *   Note when content_access() is invoked, access is granted unless one
 *   implementation of hook_field_access() explicitly returns FALSE.
 *
 * @see content_access()
 */
function plantright_survey_field_access($op, $field, $account, $node) {
  switch ($field['field_name']) {
    case 'field_photo_status':
    case 'field_data_status':
    case 'field_store_type':
    case 'field_region':
      switch ($op) {
        case 'view':
          // Deny access to view these fields to users who don't have administer
          // nodes permission.
          if (!user_access('administer nodes', $account)) {
            return false;
          }
          break;
      }
      break;
      break;
// Think below is not needed because only certified survey members can view the nursery nodes.
//	case 'field_nursery_notes':
//	  // hide nursery notes from users who can't create survey data.
//	  if (!user_access('create survey_data content')) {
//	    return false;
//	  }
//	  break;
  }
}

/**
 * Implementation of hook_form_alter.
 */
function plantright_survey_form_alter(&$form, &$form_state, $form_id) {
  $survey_id = 'plantright-survey-form';
  global $user;
  switch ($form_id) {
    case 'survey_photos_node_form':
      // Add a wrapper so JS doesn't have to use selectors for
      // both add and edit forms.
      $form['#prefix'] = '<div id="' . $survey_id . '" class="plantright-survey-photos-form">';
      $form['#suffix'] = '</div>';

      $form['buttons']['submit']['#submit'][] = 'plantright_survey_survey_photos_node_form_submit';
      $form['buttons']['submit']['#value'] = t('Submit');

      $form['prev_field_store_name'] = array(
        '#type' => 'hidden',
        '#value' => $form['#node']->field_store_name[0]['nid'],
      );
      $form['#submit'][] = 'plantright_survey_store_name_submit_handler';
      break;
    case 'survey_data_node_form':
      // Add a wrapper so JS doesn't have to use selectors for
      // both add and edit forms.
      $form['#prefix'] = '<div id="' . $survey_id . '" class="plantright-survey-data-form">';
      $form['#suffix'] = '</div>';

      $form['buttons']['submit']['#submit'][] = 'plantright_survey_survey_data_node_form_submit';
      $form['buttons']['submit']['#value'] = t('Submit');
      $form['#after_build'][] = 'plantright_survey_survey_data_node_form_after_build';

      // Populate default value for email and name.
      $form['field_survey_email'][0]['#default_value']['email'] = $user->mail;
      $form['field_survey_name'][0]['#default_value']['value'] = plantright_get_user_profile_name($user);

      $form['prev_field_store_name'] = array(
        '#type' => 'hidden',
        '#value' => $form['#node']->field_store_name[0]['nid'],
      );
      $form['#validate'][] = 'plantright_survey_data_time_validate_handler';
      $form['#submit'][] = 'plantright_survey_store_name_submit_handler';
      break;
    case 'nursery_node_form':
      $form['#after_build'][] = 'plantright_survey_nursery_node_form_after_build';
      break;
    case 'survey_profile_node_form':
      $form['field_county_1']['#after_build'][] = 'plantright_survey_survey_profile_node_form_after_build';
      break;
  }
}

/**
 * Make sure start time is less than end time.
 * @param type $form
 * @param type $form_state
 */
function plantright_survey_data_time_validate_handler(&$form, &$form_state) {
  $values = $form_state['values'];
  $times = array(
    'field_survey_start_time_value' => $values['field_survey_start_time'][0]['hour'] . ':' . $values['field_survey_start_time'][0]['minute'] . $values['field_survey_start_time'][0]['meridiem'],
    'field_survey_end_time_value' => $values['field_survey_end_time'][0]['hour'] . ':' . $values['field_survey_end_time'][0]['minute'] . $values['field_survey_end_time'][0]['meridiem'],
  );
  $diff = _plantright_survey_diff_field_time_helper($times);
  if ($diff < 0) {
    form_set_error('field_survey_start_time', t('End time must be after start time.'));
  }
  return $form;
}

/**
 * Submit handler to assign the previous store to the node for reference on save.
 */
function plantright_survey_store_name_submit_handler(&$form, &$form_state) {
  $form['#node']->original_field_store_name = $form_state['values']['prev_field_store_name'];
}

/**
 * Custom submit handler for survey data form.
 */
function plantright_survey_survey_data_node_form_submit(&$form, &$form_state) {
  if (empty($form_state['values']['nid'])) {
    // New submission.
    $key = null;
    foreach ($_SESSION['messages']['status'] as $status_key => $status) {
      if (strpos($status, 'has been created')) {
        $key = $status_key;
      }
    }

    if ($key !== null) {
      $_SESSION['messages']['status'][$key] = t('Thank you for submitting your data for %store-code. Please submit your survey photos at the <a href="/node/add/survey-photos">Upload Photos</a> page.', array('%store-code' => $form_state['values']['title']));
    }
  }
}

/**
 * Custom submit handler for survey photos form.
 */
function plantright_survey_survey_photos_node_form_submit(&$form, &$form_state) {
  if (empty($form_state['values']['nid'])) {
    // New submission.
    $key = null;
    foreach ($_SESSION['messages']['status'] as $status_key => $status) {
      if (strpos($status, 'has been created')) {
        $key = $status_key;
      }
    }

    if ($key !== null) {
      $_SESSION['messages']['status'][$key] = t('Congratulations, you have successfully submitted your photos. Please check over them below. If you want to submit more photos for this nursery, please go to <a href="/node/add/survey-photos">Upload Photos</a>.');
    }

    // Redirect to the nursery node.
    $nursery_id = $form_state['values']['field_store_name'][0]['nid'];
    $form['#redirect'] = 'node/' . $nursery_id;
  }
}

/**
 * Alter survey data form after build.
 */
function plantright_survey_survey_data_node_form_after_build($form, &$form_state) {
  // Set labels on survey date fields.
  $form_date = &$form['group_survey_basic']['field_survey_date'][0]['value'];
  _plantright_addEmptyOption($form_date['month']['#options'], t('Month'));
  _plantright_addEmptyOption($form_date['day']['#options'], t('Day'));
  _plantright_addEmptyOption($form_date['year']['#options'], t('Year'));

  // Move the title (store code) into the basic info group.
  $form['title']['#weight'] = $form['group_survey_basic']['field_store_name']['#weight'] + 1;
  $form['group_survey_basic']['field_survey_name']['#weight'] = $form['group_survey_basic']['field_survey_name']['#weight'] + 1;
  $form['group_survey_basic']['field_survey_email']['#weight'] = $form['group_survey_basic']['field_survey_email']['#weight'] + 1;
  $form['group_survey_basic']['title'] = $form['title'];
  unset($form['title']);

  // Add text to the top of the basic info area.
  $form['group_survey_basic']['help_text'] = array(
    '#value' => "<div class=\"description\"><p>Thank you for participating in PlantRight's Spring Nursery Survey. This form contains the invasive plants selected for this year's survey, and is organized by growth form. Please identify plants using their scientific names. Thank you!</p>
<p>If there are any invasive species at the nursery you surveyed, please submit your photos through the Upload Photos tab in the Spring Survey menu at the left side of y our screen. In the \"description\" field please enter the plant name and whether it is of the plant or tag (eg. Pampas grass, plant tag). Email <a href=\"mailto:plantright@suscon.org\">plantright@suscon.org</a> if you have any questions.</p></div>",
  );

  // Change the time wrapper from fieldset to item, add clearfix wrapper,
  // add labels to the empty select options, change am/pm select to radios.
  $form['group_additional']['field_survey_start_time'][0]['#type'] = 'item';
  $form['group_additional']['field_survey_start_time']['#prefix'] = '<div class="clearfix">';
  $form['group_additional']['field_survey_start_time']['#suffix'] = '</div>';
  $form['group_additional']['field_survey_start_time'][0]['hour']['#options'][''] = t('hour');
  $form['group_additional']['field_survey_start_time'][0]['minute']['#options'][''] = t('minute');

  $form['group_additional']['field_survey_end_time'][0]['#type'] = 'item';
  $form['group_additional']['field_survey_end_time']['#prefix'] = '<div class="clearfix">';
  $form['group_additional']['field_survey_end_time']['#suffix'] = '</div>';
  $form['group_additional']['field_survey_end_time'][0]['hour']['#options'][''] = t('hour');
  $form['group_additional']['field_survey_end_time'][0]['minute']['#options'][''] = t('minute');

  return $form;
}

/**
 * Alter nursery form after build.
 */
function plantright_survey_nursery_node_form_after_build($form, &$form_state) {
  _plantright_addEmptyOption($form['field_store_type']['value']['#options']);
  _plantright_addEmptyOption($form['field_region']['value']['#options']);
  _plantright_addEmptyOption($form['field_county']['value']['#options']);
  return $form;
}

/**
 * Alter nursery user profile form field county.
 */
function plantright_survey_survey_profile_node_form_after_build($form, &$form_state) {
  _plantright_addEmptyOption($form['value']['#options']);
  return $form;
}

function plantright_views_pre_render($view) {
  switch ($view->name) {
    case 'survey_counties':
      $header = _plantright_survey_county_tracking_date();
      $header .= '<p>' . l('Rebuild', 'spring-nursery-survey/reports/counties/build') . '</p>';

      $handler = &$view->display['page_1']->handler;
      $handler->set_option('header', $header);
      $handler->set_option('header_format', 2);
      break;
    case 'survey_volunteers':
      $header = _plantright_survey_volunteer_tracking_date();
      $header .= '<p>' . l('Rebuild', 'spring-nursery-survey/reports/volunteers/build') . '</p>';

      $handler = &$view->display['page_1']->handler;
      $handler->set_option('header', $header);
      $handler->set_option('header_format', 2);
      break;
    case 'survey_results':
    case 'survey_results_all':
      // Set the plant name in the label for the found and # found fields.
      $groups = fieldgroup_groups(PLANTRIGHT_NODE_TYPE_SURVEY_DATA);

      foreach ($view->field as $key => &$field) {
        //$view->display_handler->display->display_options['fields'][$key]['label'];
        if (preg_match('/field_species(\d+)_\w+_value/', $key, $matches)) {
          $index = $matches[1];
          $label = $groups['group_species' . $index]['label'];

          if ($field->options['label_type'] == 'custom') {
            $field->options['label'] = $label . ' - ' . $field->options['label'];
          }
          else {
            $field->options['label_type'] = 'custom';

            if (preg_match('/field_species\d+_found_value/', $key)) {
              $field->options['label'] = $label . ' - ' . t('Invasive Present');
            }
            else if (preg_match('/field_species\d+_number_value/', $key)) {
              $field->options['label'] = $label . ' - ' . t('Number Invasive Present');
            }
            else {
              $field_info = content_fields(substr($key, 0, -6));
              $field->options['label'] = $label . ' - ' . $field_info['widget']['label'];
            }
          }
        }
      }
      break;
    case 'nursery_list':
      if (!user_access('administer nodes')) {
        $view->feed_icon = '';
      }
      break;
  }
}

/**
 * Page callback for building county tracking.
 */
function plantright_survey_counties_build_page() {
  _plantright_survey_county_tracking_build();
  drupal_goto('spring-nursery-survey/reports/counties');
}

/**
 * Gets formatted date that country tracking was generated.
 * @return string
 */
function _plantright_survey_county_tracking_date() {
  $timestamp = variable_get('plantright_survey_county_tracking_timestamp', NULL);
  if ($timestamp) {
    return '<p>' . t('County data last built: ') . date('M j, Y g:i a', $timestamp) . '</p>';
  }
  else {
    return '<p>' . t('County data not built.') . '</p>';
  }
}

/**
 * Function that calculates the country data for export.
 */
function _plantright_survey_county_tracking_build() {
  variable_set('plantright_survey_county_tracking_timestamp', time());

  db_query("DELETE FROM {plantright_survey_county_tracking}");
  //$counties = content_allowed_values('field_county', TRUE);

  $settings = unserialize(db_result(db_query("select global_settings from content_node_field where field_name = 'field_county'")));
  $allowed_values = $settings['allowed_values'];
  $counties = explode("\n", $allowed_values);

  $claimed_store_nids = array();
  foreach (flag_get_flagged_content('nursery_flag') as $claimed) {
    $claimed_store_nids[] = $claimed->content_id;
  }

  foreach ($counties as $county) {
    $county = trim($county);
    $store_nids = array();
    $result = db_query("SELECT nid FROM {content_type_nursery} WHERE field_county_value = '%s'", $county);
    while ($row = db_fetch_array($result)) {
      $store_nids[] = $row['nid'];
    }

    $region = '';
    $stores_number_claimed = 0;
    $stores_number_total = 0;
    $stores_number_w_data_photos = 0;
	$stores_number_w_data = 0;
	$stores_number_w_photos = 0;
    $stores_percent_surveyed = 0;

    if (!empty($store_nids)) {
      foreach ($store_nids as $nid) {
        if (in_array($nid, $claimed_store_nids)) {
          $stores_number_claimed++;
        }
        $store = node_load($nid);

        if ($store->field_region[0]['value']) {
          $region = $store->field_region[0]['value'];
        }

        //nodereferrer_referrers($nid,  $fieldnames = array(), $nodetypes = array(), $translations = 0, $order = 'DESC')
        $photo_nodes = nodereferrer_referrers($nid, array('field_store_name'), array('survey_photos'));
        $data_nodes = nodereferrer_referrers($nid, array('field_store_name'), array('survey_data'));

        // Increase count if both photo and data found.
        if (count($photo_nodes) && count($data_nodes)) {
          $stores_number_w_data_photos++;
        }

		// Increase count if data found.
		if (count($data_nodes)) {
          $stores_number_w_data++;
        }

		// Increase count if photos found.
		if (count($photo_nodes)) {
          $stores_number_w_photos++;
        }

//        if ('reviewed' == $store->field_photo_status[0]['value'] && count($photo_nodes) && count($data_nodes)) {
//          $stores_number_w_data_photos++;
//        }
      }
    }

    $stores_number_total = count($store_nids);
    $stores_percent_surveyed = number_format(( $stores_number_total > 0 ? ($stores_number_w_data_photos / $stores_number_total) * 100 : 0), 2);

    db_query("INSERT INTO {plantright_survey_county_tracking} (region, county, stores_number_claimed, stores_number_total, stores_delta_claimed, stores_number_w_data_photos, stores_number_w_data, stores_number_w_photos, stores_percent_surveyed, stores_delta_data)
VALUES('%s', '%s', '%d', '%d', '%d', '%d', '%d', '%d', '%f', '%d')", $region, $county, $stores_number_claimed, $stores_number_total, $stores_number_claimed - $stores_number_total, $stores_number_w_data_photos, $stores_number_w_data, $stores_number_w_photos, $stores_percent_surveyed, $stores_number_w_data_photos - $stores_number_claimed);
  }
}

/**
 * Page callback to build volunteers tracking report.
 */
function plantright_survey_volunteers_build_page() {
  _plantright_survey_volunteer_tracking_build();
  drupal_goto('spring-nursery-survey/reports/volunteers');
}

/**
 * Gets formatted date that country tracking was generated.
 * @return string
 */
function _plantright_survey_volunteer_tracking_date() {
  $timestamp = variable_get('plantright_survey_volunteer_tracking_timestamp', NULL);
  if ($timestamp) {
    return '<p>' . t('Volunteer data last built: ') . date('M j, Y g:i a', $timestamp) . '</p>';
  }
  else {
    return '<p>' . t('Volunteer data not built.') . '</p>';
  }
}

function _plantright_survey_volunteer_tracking_build() {
  variable_set('plantright_survey_volunteer_tracking_timestamp', time());

  db_query("DELETE FROM {plantright_survey_volunteer_tracking}");

  $result = db_query("SELECT u.uid FROM {users} u LEFT JOIN {users_roles} ur ON u.uid = ur.uid WHERE ur.rid = %d", PLANTRIGHT_ROLES_SURVEY);
  while ($row = db_fetch_array($result)) {
    $survey_uids[] = $row['uid'];
  }

  foreach ($survey_uids as $uid) {
    $account = user_load(array('uid' => $uid));

    $passed_quiz = 0;
    $data_submitted = 0;
    $photos_submitted = 0;
    $claimed_store = 0;

//    $quiz = node_load(PLANTRIGHT_QUIZ_NID_SURVEY);
//    if (quiz_certificate_get_users_passing_result($quiz, $account)) {
//      $passed_quiz = 1;
//    }
    $rids = array_keys($account->roles);
    $passed_quiz = in_array(PLANTRIGHT_ROLES_SURVEY_PASSED, $rids);

    // See if there are any survey data matches
    $match = db_result(db_query("SELECT nid FROM {node} WHERE uid = %d AND type = '%s' LIMIT 1", $uid, PLANTRIGHT_NODE_TYPE_SURVEY_DATA));
    if ($match) {
      $data_submitted = 1;
    }

    // See if there are any survey photos matches
    $match = db_result(db_query("SELECT nid FROM {node} WHERE uid = %d AND type = '%s' LIMIT 1", $uid, PLANTRIGHT_NODE_TYPE_SURVEY_PHOTOS));
    if ($match) {
      $photos_submitted = 1;
    }

    //$flags = flag_get_flags('node', PLANTRIGHT_NODE_TYPE_NURSERY, $account);
    $flags = flag_get_user_flags('node', null, $account->uid);
    if (count($flags) && isset($flags[PLANTRIGHT_FLAG_SURVEY])) {
      $claimed_store = 1;
    }
    unset($flags);

    db_query("INSERT INTO {plantright_survey_volunteer_tracking} (uid, passed_quiz, data_submitted, photos_submitted, claimed_store)
VALUES(%d, %d, %d, %d, %d)", $uid, $passed_quiz, $data_submitted, $photos_submitted, $claimed_store);
  }
}

/**
 * Implements hook_views_api().
 */
function plantright_survey_views_api() {
  return array(
    'api' => '2',
    'path' => drupal_get_path('module', 'plantright_survey') . '/views',
      //'template path' => drupal_get_path('module', 'plantright_survey') . '/templates',
  );
}

/**
 * Implements hook_views_query_alter().
 */
function plantright_survey_views_query_alter(&$view, &$query) {
  switch ($view->name) {
    case 'my_nursuries_node_reference':
      // Alter nurseries select list for data and photo submission
      // so admins can have a list of all.
      $where = &$view->query->where[0];
      foreach ($where['clauses'] as $key => $clause) {
        if (strpos($clause, 'users_node_data_field_surveying_user.uid') === 0) {
          //$clause .= ' OR users_roles.rid = ' . PLANTRIGHT_ROLE_ID_ADMIN;
          $uid = $where['args'][$key];
          $account = user_load($uid);
          if (user_access('edit any survey_photos content', $account) || user_access('edit any survey_data content', $account)) {
            unset($where['clauses'][$key], $where['args'][$key]);
          }
        }
      }
      break;
  }
}

function _plantright_survey_diff_field_time_helper($values) {
  foreach ($values as $key => $value) {
    if (strpos($key, 'field_survey_start_time_value') !== FALSE) {
      $start_time = _plantright_survey_field_time_helper($value);
    }
    else if (strpos($key, 'field_survey_end_time_value') !== FALSE) {
      $end_time = _plantright_survey_field_time_helper($value);
    }
  }
  return $end_time - $start_time;
}

function _plantright_survey_field_time_helper($value) {
  $time = substr($value, 0, -2);
  $parts = explode(':', $time);
  if (strpos($value, 'PM') && $parts[0] < 12) {
    $parts[0] += 12;
    $time = $parts[0] . ':' . $parts[1];
  }
  return strtotime($time);
}

/**
 * Shared function to get the survey end dates.
 * @return array
 */
function plantright_survey_get_end_dates() {
  $dates = array(
    'south' => '5/25/2014',
    'north' => '6/22/2014',
  );
  foreach ($dates as $area => $date) {
    $dates[$area] = strtotime($date);
  }
  return $dates;
}

/**
 * Shared function to get survey end date by area.
 * @param string $area
 * @return timestamp
 */
function plantright_survey_get_end_date_by_area($area) {
  $dates = plantright_survey_get_end_dates();
  if (isset($dates[$area])) {
    return $dates[$area];
  }
}

/**
 * Helper function to get array of counties and area.
 * @return array
 */
function plantright_survey_get_counties() {
  return array(
    'Alameda' => 'north',
    'Alpine' => 'north',
    'Amador' => 'north',
    'Butte' => 'north',
    'Calaveras' => 'north',
    'Colusa' => 'north',
    'Contra Costa' => 'north',
    'Del Norte' => 'north',
    'El Dorado' => 'north',
    'Fresno' => 'north',
    'Glenn' => 'north',
    'Humboldt' => 'north',
    'Imperial' => 'south',
    'Inyo' => 'north',
    'Kern' => 'south',
    'Kings' => 'north',
    'Lake' => 'north',
    'Lassen' => 'north',
    'Los Angeles' => 'south',
    'Madera' => 'north',
    'Marin' => 'north',
    'Mariposa' => 'north',
    'Mendocino' => 'north',
    'Merced' => 'north',
    'Modoc' => 'north',
    'Mono' => 'north',
    'Monterey' => 'north',
    'Napa' => 'north',
    'Nevada' => 'north',
    'Orange' => 'south',
    'Placer' => 'north',
    'Plumas' => 'north',
    'Riverside' => 'south',
    'Sacramento' => 'north',
    'San Benito' => 'north',
    'San Bernardino' => 'north',
    'San Diego' => 'south',
    'San Francisco' => 'north',
    'San Joaquin' => 'north',
    'San Luis Obispo' => 'south',
    'San Mateo' => 'north',
    'Santa Barbara' => 'south',
    'Santa Clara' => 'north',
    'Santa Cruz' => 'north',
    'Shasta' => 'north',
    'Sierra' => 'north',
    'Siskiyou' => 'north',
    'Solano' => 'north',
    'Sonoma' => 'north',
    'Stanislaus' => 'north',
    'Sutter' => 'north',
    'Tehama' => 'north',
    'Trinity' => 'north',
    'Tulare' => 'north',
    'Tuolumne' => 'north',
    'Ventura' => 'south',
    'Yolo' => 'north',
    'Yuba' => 'north',
  );
}

/**
 * Shared function to return area by county.
 */
function plantright_survey_get_area_by_county($county) {
  $county = ucwords($county);
  $counties = plantright_survey_get_counties();
  return $counties[$county];
}

/**
 * Shared function to get all counties in an area.
 * @param string $area
 * @return array
 */
function plantright_survey_get_counties_by_area($area) {
  $counties = plantright_survey_get_counties();
  $matches = array();
  foreach ($counties as $county => $county_area) {
    if ($area == $county_area) {
      $matches[] = $county;
    }
  }
  return $matches;
}

//function plantright_survey_cron() {
//}
