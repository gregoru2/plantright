<?php

/**
 * @file
 * Integrates the core node object and various node related modules with the
 *   Salesforce API.
 */


/**
 * Implementation of hook_menu().
 */
function sf_node_menu() {
  $items['node/%node/salesforce'] = array(
    'title' => 'Salesforce',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sf_node_salesforce_form', 1),
    'access callback' => 'sf_node_salesforce_form_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );
  
  $items['node/%node/salesforce/%'] = array(
    'title' => 'Salesforce',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sf_node_salesforce_form', 1, 3),
    'access callback' => 'sf_node_salesforce_form_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

// Access callback for the node/%node/salesforce menu item.
function sf_node_salesforce_form_access($node) {
  return user_access('administer salesforce') and salesforce_api_fieldmap_options('node_'. $node->type);
}

/**
 * Implementation of hook_form_alter().
 */
function sf_node_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'salesforce_api_settings_form') {
    $form['sf_node'] = array(
      '#type' => 'fieldset',
      '#title' => t('Node integration'),
      '#description' => t('Placeholder for any node integration settings.'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => -1,
      // The admin form is getting cluttered. This is going to be hidden until
      // there is actually something here:
      '#access' => FALSE,
    );
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function sf_node_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'load':
      $node->salesforce = salesforce_api_id_load('node', $node->nid);
      break;

    case 'delete':
      $maps = salesforce_api_salesforce_field_map_load_by(array('drupal' => 'node_' . $node->type));
      $map = current($maps);
      if ($map->automatic & SALESFORCE_AUTO_SYNC_DELETE) {
        $continue = TRUE;
        $continues = module_invoke_all('salesforce_api_delete', $node->salesforce->sfid, $map, $node->nid);
        if (!empty($continues)) {
          foreach ($continues as $continue) {
            if ($continue === FALSE) {
              break;
            }
          }
        }
        if ($continue) {
          salesforce_api_delete_salesforce_objects($node->salesforce->sfid);
        }
      }
      salesforce_api_delete_object_map('node', $node->nid);
      break;

    case 'update':
    case 'insert':
      // When importing *from* Salesforce, don't export *back* to Salesforce.
      if (isset($node->sf_node_skip_export)) {
        break;
      }

      // If this is an update, and the node already has a salesforce mapping,
      // try to load it. If the load fails, we need to fetch the appropriate
      // fieldmap. Either way, we're upserting the salesforce record.
      if ($node->nid) {
        $salesforce_arr = array_replace(salesforce_api_salesforce_field_map_load_by(array('drupal' => 'node_' . $node->type)), salesforce_api_id_load('node', $node->nid));
        if (!empty($salesforce_arr)) {
          $maps = array();
          foreach ($salesforce_arr as $salesforce) {
            $maps[$salesforce->name] = salesforce_api_fieldmap_load($salesforce->name);
          }
        }
      }

      if (empty($maps)) {
        $maps = salesforce_api_salesforce_field_map_load_by(array('drupal' => 'node_' . $node->type));
        if (empty($maps)) {
          break;
        }
      }

      foreach ($maps as $map) {
        $auto_create = $map->automatic & SALESFORCE_AUTO_SYNC_CREATE;
        $auto_update = $map->automatic & SALESFORCE_AUTO_SYNC_UPDATE;
        if ((!$auto_create && $op == 'insert')
            || (!$auto_update && $op == 'update')) {
          unset($maps[$map->name]);
        }
      }

      // If all our maps were unset, abort this procedure.
      if (empty($maps)) {
        break;
      }

      foreach ($maps as $map) {
        // Finally, export the node to Salesforce.
        try {
          sf_node_export($node, $map->name, $salesforce_arr[$map->name]->sfid);
        }
        catch (Exception $e) {
          salesforce_api_log(SALESFORCE_LOG_SOME, 'Exception while attempting to export node: ' . $e->getMessage(), array(), WATCHDOG_ERROR, l('node ' . $node->nid, 'node/' . $node->nid));
        }
      }
  }
}

/**
 * Implementation of hook_content_fieldapi()
 * Delete a field from a Salesforce fieldmap when the field instance is deleted.
 */
function sf_node_content_fieldapi($op, $field) {
  switch ($op) {
    case 'delete instance':
      salesforce_api_fieldmap_field_delete($field['field_name'], 'node_' . $field['type_name']);
      break;
  }
}



/**
 * Implementation of hook_fieldmap_objects_alter().
 */
function sf_node_fieldmap_objects($type) {
  $objects = array();

  // Define the data fields available for Drupal objects.
  if ($type == 'drupal') {
    // Add a definition for each node type.
    foreach (node_get_types() as $type) {
      // Define the node type object with the node ID field.
      $objects['node_'. $type->type] = array(
        'label' => t('@name node', array('@name' => $type->name)),
        'fields' => array(
          'nid' => array('label' => t('Node ID'), 'type' => SALESFORCE_FIELD_SOURCE_ONLY),
        ),
      );

      // Add a title field if the node type has one.
      if ($type->has_title) {
        $objects['node_'. $type->type]['fields']['title'] = array('label' => check_plain($type->title_label));
      }

      // Add a body field if the node type has one.
      if ($type->has_body) {
        // Body is actually body+teaser
        $objects['node_'. $type->type]['fields']['body'] = array(
          'label' => check_plain($type->body_label),
          'export' => '_sf_node_export_body',
          'import' => '_sf_node_import_body',
          );
      }

      // Add the rest of the core fields.
      $objects['node_'. $type->type]['fields'] += array(
        'type' => array('label' => t('Node type')),
        'status' => array('label' => t('Is the node published?')),
        'promote' => array('label' => t('Is the node promoted?')),
        'created' => array(
          'label' => t('Created timestamp'),
          'export' => '_sf_node_export_date',
          'import' => '_sf_node_import_date',
        ),
        'uid' => array('label' => t("Author's user ID"), 'type' => SALESFORCE_FIELD_SOURCE_ONLY),
        'name' => array('label' => t("Author's username"), 'type' => SALESFORCE_FIELD_SOURCE_ONLY),
        'mail' => array(
          'label' => t("Author's email"),
          'export' => '_sf_node_export_author_email',
          'type' => SALESFORCE_FIELD_SOURCE_ONLY
        ),
        'blank' => array(
          'label' => t("(blank)"),
          'export' => '_sf_node_export_blank',
          'type' => SALESFORCE_FIELD_SOURCE_ONLY
        ),
      );
    }

    // Add CCK fields to the node object definitions.
    if (module_exists('content')) {
      // Loop through each of the content types.
      foreach (content_types() as $type) {
        // Add each of the fields to the node object definition.
        $group = t('@type CCK fields', array('@type' => $type['name']));
        $index = 'node_' . $type['type'];
        foreach ((array) $type['fields'] as $field) {
          // Choose a handler based on the type of the CCK field.
          $export_handler = $import_handler = FALSE;

          // @see sf_contrib.module
          if (function_exists('_sf_node_export_cck_' . $field['type'])) {
            $export_handler = '_sf_node_export_cck_' . $field['type'];
          }
          if (function_exists('_sf_node_import_cck_' . $field['type'])) {
            $import_handler = '_sf_node_import_cck_' . $field['type'];
          }

          if ($field['widget']['type'] == 'optionwidgets_onoff') {
            $export_handler = $export_handler
              ? $export_handler
              : '_sf_node_export_cck_checkbox';
          }
          else {
            $export_handler = $export_handler
              ? $export_handler
              : '_sf_node_export_cck_default';
          }
          $import_handler = $import_handler
            ? $import_handler
            : '_sf_node_import_cck_default';

          foreach ($field['columns'] as $column => $data) {
            $key = $field['field_name'];
            $my_label = check_plain($field['widget']['label']);
            if ($column != 'value') {
              $key .= ':' . $column;
              $my_label .= " ($column)";
            }
            $my_group = t('@group: @label',
              array('@group' => $group, '@label' => $field['widget']['label']));
            $objects[$index]['fields'][$key] = array(
              'group' => $my_group,
              'label' => $my_label,
              'export' => $export_handler,
              'import' => $import_handler,
              'type' => $field['type'],
              'multiple' => $field['multiple'],
             );
          }
        }
      }
    }
  }

  return $objects;
}

// Returns the basic value of a CCK field from $array[0]['value'].
function _sf_node_export_cck_default($node, $fieldname, $drupal_field_definition, $sf_field_definition) {
  // Get the data array for the field.
  list($fieldname, $column) = explode(':', $fieldname, 2);
  if (empty($column)) {
    $column = 'value';
  }
  $data = $node->$fieldname;
  switch ($sf_field_definition['salesforce']['type']) {
    case 'multipicklist':
      // SF wants a semicolon-delimited string for multipicklist values
      $values = array();
      foreach ($data as $row) {
        $values[] = $row[$column];
      }
      $result = implode(';', $values);
      break;
    default:
      // Unless handled above, use only the first value.
      $result = $data[0][$column];
      break;
  }
  return $result;
}

// Populates the value of a CCK field from its corresponding SF field's value.
function _sf_node_import_cck_default(&$node, $drupal_fieldname, $drupal_field_definition, $sf_data, $sf_fieldname, $sf_field_definition) {
  $data = array();
  list($drupal_fieldname, $column) = explode(':', $drupal_fieldname, 2);
  if (empty($column)) {
    $column = 'value';
  }
  // Convert data based on what SF type we're importing.
  switch ($sf_field_definition['salesforce']['type']) {
    case 'multipicklist':
      // SF sends multiple values as a semicolon-delimited string.
      if ($drupal_field_definition['multiple']) {
        $sf_data = explode(';', $sf_data->$sf_fieldname);
        foreach ($sf_data as $row) {
          $data[] = array($column => $row);
        }
      }
      else {
        $data[0][$column] = $sf_data->$sf_fieldname;
      }
    break;
    default:
      // Unless handled above in this switch, we don't yet handle fields with multiple values.
      $data[0][$column] = $sf_data->$sf_fieldname;
    break;
  }
  $node->$drupal_fieldname = $data;
}

// Returns the email address of the node's author, given by node->uid
function _sf_node_export_author_email($node, $fieldname, $drupal_field_definition, $sf_field_definition) {
  $uid = $node->uid;
  if (!is_numeric($uid)) {
    return NULL;
  }
  return db_result(db_query('SELECT mail FROM {users} WHERE uid = %d', $uid));
}

// Export a timestamp in a format Salesforce comprehends.
function _sf_node_export_date($node, $fieldname, $drupal_field_definition, $sf_field_definition) {
  return gmdate(DATE_ATOM, $node->$fieldname);
}

// Given a Salesforce time, import a node timestamp.
function _sf_node_import_date(&$node, $drupal_fieldname, $drupal_field_definition, $sf_data, $sf_fieldname, $sf_field_definition) {
  $node->$drupal_fieldname = strtotime($source->$sf_fieldname);
}

// Export the text value "(blank)".
function _sf_node_export_blank($node, $fieldname, $drupal_field_definition, $sf_field_definition) {
  return t('(blank)');
}

function _sf_node_export_body($node, $fieldname, $drupal_field_definition, $sf_field_definition) {
  // Only add teaser text to the begining of the body if it is excluded
  // on the node object.
  if (!empty($node->teaser) AND strpos($node->body, '<!--break-->') === 0) {
    return $node->teaser . $node->body;
  }
  return $node->body;
}

function _sf_node_import_body(&$node, $drupal_fieldname, $drupal_field_definition, $sf_data, $sf_fieldname, $sf_field_definition) {
  // Preserve Drupal configuration for this node in terms of whether or not
  // the teaser is included in the body text.
  $import_data = html_entity_decode($sf_data->$sf_fieldname);
  if (!empty($node->teaser) AND strpos($node->body, '<!--break-->') !== 0) {
    // Teaser is included in body.
    $node->body = $import_data;
  }
  else {
    // Teaser is not included in body.
    $offset = strpos($import_data, '<!--break-->');
    $node->body = substr($import_data, $offset);
  }
  $node->teaser = node_teaser($import_data);
}

// Assume that a on/off checkbox is a SF boolean, which can never be set to NULL
function _sf_node_export_cck_checkbox($source, $field) {
  $data = $source->$field;
  if (empty($source->{$field}[0]['value'])) {
    return 'false';
  }
  else {
    return 1;
  }
}

// Displays the Salesforce synchronization form.
function sf_node_salesforce_form(&$form_state, $node, $i = 0) {
  // Fail out if the node didn't exist!
  if (!$node->nid) {
    drupal_not_found();
  }
  
  $arr = array_keys($node->salesforce);
  $index = $arr[$i];
 

  if (isset($form_state['storage']['confirm'])) {
     $form['index'] = array(
      '#type' => 'value',
      '#value' => $index,
    );
    // ALSO do $form definition here. Your final submit handler (after user clicks Yes, I Confirm) will only see $form_state info defined here. Form you create here passed as param1 to confirm_form
    $form['node'] = array('#type' => 'value', '#value' => $node);
    return confirm_form($form, 'Are you sure you want to unlink this node from Salesforce?', 'node/' . $node->nid . '/salesforce', 'Unlinking this object will remove the connection between the Drupal object and the Salesforce record. This action will not delete the Drupal object or the Salesforce record. This cannot be undone.', 'Unlink', 'Cancel'); //Had better luck leaving off last param 'name'
  }

  // Set the node page title.
  drupal_set_title(check_plain($node->title));

  $form = array();
  
  $form['index'] = array(
    '#type' => 'value',
    '#value' => $index,
  );

  $form['nid'] = array(
    '#type' => 'value',
    '#value' => $node->nid,
  );
  
  
  if ($node->salesforce[$index]->sfid) {
    // Retrieve the object from Salesforce.
    $sf_data = salesforce_api_retrieve(array($node->salesforce[$index]->sfid), $node->salesforce[$index]->name);
    // Check to see if sf_data is an array of objects
    if (is_array($sf_data) && count($sf_data) > 0) {
      $sf_data = $sf_data[0];
    }
    // If $sf_data is empty, we assume the record is deleted. retrieve() does
    // not return the ENTITY_IS_DELETED error that upsert() does.
    if (!$sf_data && SALESFORCE_DELETED_POLICY_UPSERT == variable_get('salesforce_api_entity_deleted_policy', SALESFORCE_DELETED_POLICY_UPSERT)) {
      drupal_set_message(t('Unable to retrieve Salesforce data for record !sfid. Drupal and Salesforce records have been unlinked.', array('!sfid' => $node->salesforce[$index]->sfid)), 'warning');
      // Unlink the object
      salesforce_api_id_unlink(array('oid' => $node->nid, 'name' => $node->salesforce[$index]->name));
      $node = node_load($node->nid, NULL, TRUE);
    }
    elseif (!$sf_data) {
      drupal_set_message(t('Unable to retrieve Salesforce data for record !sfid.', array('!sfid' => $node->salesforce[$index]->sfid)), 'warning');
    }
  }

  // Display an export button if the node hasn't been exported before.
  if (!$node->salesforce[$index]->sfid) {
    $form['export'] = array(
      '#type' => 'fieldset',
      '#title' => t('Export node to Salesforce'),
      '#description' => t('This node may be exported to Salesforce using any fieldmap listed below.'),
    );

    // Add the export form.
    $form['export']['fieldmap'] = array(
      '#type' => 'select',
      '#title' => t('Export fieldmap'),
      '#options' => salesforce_api_fieldmap_options('node_'. $node->type),
    );

    $form['export']['manual_linking'] = array(
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#title' => t('Manual linking'),
    );

    $form['export']['manual_linking']['sfid'] = array(
      '#type' => 'textfield',
      '#title' => t('Salesforce ID'),
      '#description' => t('If this node already has a corresponding object
      in Salesforce, enter the Salesforce ID to manually link the entities.
      Salesforce record will be linked using the fieldmap selected above.
      <strong>Please ensure that the Salesforce object type matches that of
      fieldmap selected above.</strong>.<br /><br /><em>Create Link</em> will
      link two Drupal and Salesforce records, leaving field values unchanged.
      <br /><em>Export Node</em> will upsert the Drupal record, inserting or
      updating any Salesforce record as necessary.'),
      '#size' => 18,
      '#maxlength' => 18,
    );

    $form['export']['manual_linking']['link'] = array(
      '#type' => 'submit',
      '#value' => t('Create Link'),
    );

    $form['export']['export_node'] = array(
      '#type' => 'submit',
      '#value' => t('Export node'),
    );
  }
  else {
    // Otherwise add synchronization information.
    $form['sfid'] = array(
      '#type' => 'value',
      '#value' => $node->salesforce[$index]->sfid,
    );
    $form['fieldmap'] = array(
      '#type' => 'value',
      '#value' => $node->salesforce[$index]->name,
    );

    // Load the fieldmap data.
    $map = salesforce_api_fieldmap_load($node->salesforce[$index]->name);
    $sf_object_definition = salesforce_api_fieldmap_objects_load('salesforce', $map->salesforce);
    $export_data = salesforce_api_fieldmap_export_create($node->salesforce[$index]->name, $node);

    $header = array(t('Field name'), t('Drupal @type value', array('@type' => salesforce_api_fieldmap_object_label('drupal', $map->drupal))), t('Salesforce @type value', array('@type' => salesforce_api_fieldmap_object_label('salesforce', $map->salesforce))));
    $rows = array();

    foreach ($map->fields as $sf_fieldname => $drupal_fieldname) {
      $rows[] = array(
        $sf_object_definition['fields'][$sf_fieldname]['label'],
        $export_data->$sf_fieldname,
        $sf_data->$sf_fieldname,
      );
    }

    $form['mapped'] = array(
      '#type' => 'fieldset',
      '#title' => t('Mapped field values'),
      '#description' => t('<a href="!url">Edit this fieldmap</a>.', array('!url' => url(SALESFORCE_PATH_FIELDMAPS .'/'. $node->salesforce[$index]->name .'/edit'))),
    );
    $form['mapped']['fieldmap_values'] = array(
      '#value' => theme('table', $header, $rows),
    );

    $form['mapped']['export_values'] = array(
      '#type' => 'submit',
      '#value' => t('Export changes to Salesforce'),
      '#attributes' => array('class' => 'sf-confirm'),
    );
    $form['mapped']['import_values'] = array(
      '#type' => 'submit',
      '#value' => t('Import changes from Salesforce'),
      '#attributes' => array('class' => 'sf-confirm'),
    );
    $form['mapped']['unlink'] = array(
      '#type' => 'submit',
      '#value' => t('Unlink from Salesforce object...'),
      '#attributes' => array('class' => 'sf-confirm'),
    );

    // Create a table for the unmapped fields.
    $header = array(t('Field name'), t('Salesforce @type value', array('@type' => salesforce_api_fieldmap_object_label('salesforce', $map->salesforce))));
    $rows = array();

    foreach ((array) $sf_data as $key => $value) {
      if (!isset($map->fields[$key]) && isset($sf_object_definition['fields'][$key])) {
        $rows[] = array(
          $sf_object_definition['fields'][$key]['label'],
          $value,
        );
      }
    }

    if (count($rows) > 0) {
      $form['unmapped'] = array(
        '#type' => 'fieldset',
        '#title' => t('Unmapped fields'),
        '#description' => t('These fields are available on Salesforce but are not currently mapped through the fieldmap used for this user.'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      );
      $form['unmapped']['unmmaped_fields'] = array(
        '#value' => theme('table', $header, $rows),
      );
    }

    $rows = array();

    foreach (salesforce_api_fieldmap_system_fields() as $key => $value) {
      $rows[] = array(
        $value['label'],
        $sf_data->$key,
      );
    }

    $form['system'] = array(
      '#type' => 'fieldset',
      '#title' => t('System fields'),
      '#description' => t('These fields provide additional system information about the Salesforce object but cannot be exported to Salesforce.'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['system']['system_fields'] = array(
      '#value' => theme('table', $header, $rows),
    );

    $form['raw'] = array(
      '#type' => 'fieldset',
      '#title' => t('Raw data'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['raw']['data'] = array(
      '#value' => '<pre>'. print_r($sf_data, TRUE) .'</pre>',
    );
  }

  return $form;
}

function sf_node_salesforce_form_submit($form, &$form_state) {
  $index = $form_state['values']['index'];
  switch ($form_state['values']['op']) {
    // Export the node to Salesforce.
    case t('Export node'):
    case t('Export changes to Salesforce'):
      if (sf_node_export($form_state['values']['nid'], $form_state['values']['fieldmap'], $form_state['values']['sfid'])) {
        drupal_set_message(t('Changes successfully exported to Salesforce.'));
      }
      else {
        drupal_set_message(t('An error occurred while exporting the changes to Salesforce. Check the watchdog for more information.'), 'error');
      }
      break;

    // Import changes from Salesforce.
    case t('Import changes from Salesforce'):
      if (sf_node_import($form_state['values']['sfid'], $form_state['values']['fieldmap'], $form_state['values']['nid'])) {
        drupal_set_message(t('The node has been updated with values from Salesforce.'));
      }
      else {
        drupal_set_message(t('An error occurred while importing the changes from Salesforce. Check the watchdog for more information.'), 'error');
      }
      break;
    case $form_state['values']['link']:
      if (!is_sfid($form_state['values']['sfid'])) {
        drupal_set_message(t('Invalid SFID provided.'), 'error');
        break;
      }
      salesforce_api_id_save('node', $form_state['values']['nid'], $form_state['values']['sfid'], $form_state['values']['fieldmap'], 'link');
      break;
    case $form_state['values']['unlink']:
    case t('Unlink'):
      if (!isset($form_state['storage']['confirm'])) {
        $form_state['storage']['confirm'] = TRUE;
        $form_state['rebuild'] = TRUE;
      }
      else {
        unset($form_state['storage']['confirm']);
        $node = $form_state['values']['node'];
        salesforce_api_id_unlink(array('oid' => $node->nid, 'name' => $node->salesforce[$index]->name));
        drupal_set_message(t('The node !nid has been unlinked from Salesforce !sfid.', array('!nid' => $node->nid, '!sfid' => $node->salesforce[$index]->sfid)));
      }
      break;
  }
}

/**
 * Exports a node to Salesforce using the specified fieldmap and stores the
 *   ID of the Salesforce object for the node.
 *
 * @param $node
 *   The node object to export (also accepts a numeric node id).
 * @param $fieldmap
 *   The index of the fieldmap to use to create the export object.
 * @param $sfid
 *   The Salesforce ID of the object you want to update.  If left NULL, a new
 *     object will be created at Salesforce.
 * @return
 *   TRUE or FALSE indicating the success of the operation.
 */
function sf_node_export($node, $name, $sfid = NULL) {
  // Attempt to connect to Salesforce.
  $sf = salesforce_api_connect();
  if (!$sf) {
    // Let modules react to a failure to export this node.
    module_invoke_all('salesforce_api_export_connect_fail', is_object($node) ? $node->nid : $node, $name, $sfid);
    if (user_access('administer salesforce')) {
      drupal_set_message(t('Unable to connect to Salesforce using <a href="!url">current credentials</a>.', array('!url' => url(SALESFORCE_PATH_ADMIN))));
    }
    return FALSE;
  }

  // Load the node if we didn't get a full object.
  if (is_numeric($node)) {
    $node = node_load($node);
  }

  // Load the fieldmap so we can get the object name.
  $map = salesforce_api_fieldmap_load($name);

  // Look for any matching records which we might want to update instead of creating duplicates.
  if (empty($sfid)) {
    $matches = salesforce_api_search_for_duplicates('export', 'node', $node, $name);
    if (!empty($matches)) {
      $sfid = reset($matches);
      $node->salesforce[$name] = array('sfid' => $sfid, 'name' => $name);
      salesforce_api_id_save('node', $node->nid, $sfid, $name, 'export');
      $node = node_load($node->nid, NULL, TRUE);
    }
    if (empty($node)) {
      $node = (object)array();
    }
  }
  // Create an object for export based on the specified fieldmap.
  $object = salesforce_api_fieldmap_export_create($name, $node);
  $object->Id = $sfid;

  foreach (module_implements('salesforce_api_pre_export') as $module) {
    $function = $module . '_salesforce_api_pre_export';
    $continue = $function($object, $map, $node->nid);
    if ($continue === FALSE) {
      return;
    }
  }

  // If any modules altered the fieldmap, ensure that the new fieldmap name
  // is used for the rest of the export.
  if ($map->name != $name) {
    $name = $map->name;
  }

  try {
    $response = $sf->client->upsert('Id', array($object), $map->salesforce);
  }
  catch (Exception $e) {
    salesforce_api_log(SALESFORCE_LOG_SOME, 'Exception while attempting to upsert node: %msg <pre>%e</pre>', array('%msg' => $e->getMessage(), '%e' => print_r($e, TRUE)), WATCHDOG_ERROR, l('node ' . $node->nid, 'node/' . $node->nid));
  }

  // Check to see if response is an array of objects
  if (is_array($response) && count($response) > 0) {
    $response = $response[0];
  }
  
  // If we got errors, handle them before proceeding
  if (is_object($response->errors)) {
    // If we got "Entity is deleted" and we're configured to unlink and upsert,
    // do it.
    if ($response->errors->statusCode == 'ENTITY_IS_DELETED'
    // ENTITIY_IS_DELETED error is also returned if any lookup-field values
    // reference deleted Salesforce Records. If the fields property references
    // "Id" or if fields is empty, then we know that the the primary record was
    // deleted. Otherwise we don't have a good way to react.
    && ($response->errors->fields == 'Id' || empty($response->errors->fields))
    && SALESFORCE_DELETED_POLICY_UPSERT == variable_get('salesforce_api_entity_deleted_policy', SALESFORCE_DELETED_POLICY_UPSERT)) {
      // If the entity is deleted, unlink ALL the linked drupal objects.
      salesforce_api_id_unlink(array('sfid' => $object->Id));
      $node->salesforce[$map->name]->sfid = $object->Id = NULL;

      // Look for any matching records which we might want to update instead of
      // creating duplicates. Assume that salesforce_api_search_for_duplicates()
      // will never return a deleted record.
      $matches = salesforce_api_search_for_duplicates('export', 'node', $node, $name);
      if (!empty($matches)) {
        $sfid = reset($matches);
        $node->salesforce[$map->name]->sfid = $sfid;
      }

      salesforce_api_log(SALESFORCE_LOG_SOME, 'Salesforce entity deleted. Attempting to unlink and upsert. <pre>%response</pre>', array('%response' => print_r($response, 1)), WATCHDOG_ERROR, l('node ' . $node->nid, 'node/' . $node->nid));
      try {
        $response = $sf->client->upsert('Id', array($object), $map->salesforce);
      }
      catch (Exception $e) {
        salesforce_api_log(SALESFORCE_LOG_SOME, 'Exception while attempting to upsert node: %msg <pre>%e</pre>', array('%msg' => $e->getMessage(), '%e' => print_r($e, TRUE)), WATCHDOG_ERROR, l('node ' . $node->nid, 'node/' . $node->nid));
      }
    }
  }

  // If the export was successful...
  if ($response->success) {
    // Store the Salesforce ID for the node and return TRUE.
    salesforce_api_id_save('node', $node->nid, $response->id, $name, 'export');
  }
  else {
    // Otherwise log the error and return FALSE.
    if (user_access('administer salesforce')) {
      if (function_exists('dpm')) {
        dpm($response);
      }
      else {
        drupal_set_message(t('Salesforce Suite export error: <pre>%response</pre>', array('%response' => print_r($response, 1))), 'error');
      }
    }
    salesforce_api_log(SALESFORCE_LOG_SOME, 'Salesforce returned an unsuccessful response: <pre>%response</pre>', array('%response' => print_r($response, 1)), WATCHDOG_ERROR, l('node ' . $node->nid, 'node/' . $node->nid));
  }
  module_invoke_all('salesforce_api_post_export', $object, $map, $node->nid, $response);
  return $response->success;
}

/**
 * Imports data from Salesforce into a node.
 *
 * @param $sf_data
 *   The Salesforce Object OR The Salesforce ID of the object to be imported.
 * @param $name
 *   The name of the fieldmap to use to create the export object.
 * @param $nid
 *   The nid of the node to update.  If left NULL, a new node will be created.
 * @return
 *   The nid of the imported node or FALSE on failure.
 */
function sf_node_import($sf_data, $name, $nid = NULL, $options = array()) {
  // Retrieve the object from Salesforce.
  $sf = salesforce_api_connect();
  if (!$sf) {
    if (user_access('administer salesforce')) {
      drupal_set_message(t('Unable to connect to Salesforce using <a href="!url">current credentials</a>.', array('!url' => url(SALESFORCE_PATH_ADMIN))));
    }
    return FALSE;
  }

  if (is_sfid($sf_data)) {
    $sf_data = salesforce_api_retrieve(array($sf_data), $name);
    // Check to see if sf_data is an array of objects
    if (is_array($sf_data) && count($sf_data) > 0) {
      $sf_data = $sf_data[0];
    }
  }
  elseif (is_array($sf_data)) {
    $sf_data = (object) $sf_data;
  }

  if (empty($sf_data)) {
    return FALSE;
  }

  // Load the fieldmap data.
  $map = salesforce_api_fieldmap_load($name);
  
  // Load the object definitions.
  $drupal_object_definition = salesforce_api_fieldmap_objects_load('drupal', $map->drupal);
  $salesforce_object_definition = salesforce_api_fieldmap_objects_load('salesforce', $map->salesforce);

  // If the node exists, simply update the existing node.
  $node = node_load($nid);
  $create = FALSE;
  if (empty($nid) || empty($node)) {
    // Look for any matching records which we might want to update instead of creating duplicates.
    $matches = salesforce_api_search_for_duplicates('import', 'node', $sf_data, $name);
    if (!empty($matches)) {
      $nid = reset($matches);
      if (!empty($nid)) {
        $node = node_load($nid);
      }
    }
    if (empty($node)) {
      $create = TRUE;
      global $language;
      $node = (object)array(
        'type' => substr($map->drupal, 5),
        'language' => $language->language,
        'uid' => 1,
      );
    }
  }

  $changed_fields = 0;
  // Loop through the fields on the fieldmap.
  foreach ($map->fields as $sf_fieldname => $drupal_fieldname) {
    $previous_value = $node->$drupal_fieldname;
    // If a handler is specified for importing a value from Salesforce....
    if (is_array($drupal_fieldname)) {
      // There is no logical way to import Salesforce values into Drupal fixed
      // or php values.
      continue;
    }
    elseif (isset($drupal_object_definition['fields'][$drupal_fieldname]['import'])) {
      $drupal_field_import_handler = $drupal_object_definition['fields'][$drupal_fieldname]['import'];
      $drupal_field_definition = $drupal_object_definition['fields'][$drupal_fieldname];
      $sf_field_definition = $salesforce_object_definition['fields'][$sf_fieldname];
      // Let the handler function set the value for the field on the node.
      $drupal_field_import_handler($node, $drupal_fieldname, $drupal_field_definition, $sf_data, $sf_fieldname, $sf_field_definition);
    }
    elseif (isset($sf_data->$sf_fieldname)) {
      // Otherwise set the field on the export object to the value of the source
      // field if it's present on the source object.
      $node->$drupal_fieldname = $sf_data->$sf_fieldname;
    }
    if (isset($previous_value[0]['date_type'])) {
      $new_value = $node->$drupal_fieldname;
      $new_value = $new_value[0]['value']; // This looks wrong but I need to convert an object element which is an array to a string
      if (strncmp($previous_value[0]['value'], $new_value, strlen($new_value)) != 0) {
        $changed_fields++;
      }
    }
    else {
      if ($node->$drupal_fieldname != $previous_value) {
        $changed_fields++;
      }
    }
  } // end of loop through fields

  $comparison_node = drupal_clone($node);

  foreach (module_implements('salesforce_api_pre_import') as $module) {
    $function = $module . '_salesforce_api_pre_import';
    $continue = $function($node, $name, $sf_data);
    if ($continue === FALSE) {
      return;
    }
  }
  
  if ($changed_fields == 0 && $comparison_node == $node) {
    // No fields changed, so don't save anything.
    // Return the node ID to signal a "successful" save
    return $node->nid;
  }

  $node->sf_node_skip_export = TRUE;
  node_save($node);

  $sfid = $sf_data->Id;

  if ((($map->automatic & SALESFORCE_AUTO_SYNC_CREATE) && $create)
    || (($map->automatic & SALESFORCE_AUTO_SYNC_UPDATE) && !$create)
    || (!empty($options['extra-linked']) && $options['extra-linked'] == TRUE)) {
    // Store the Salesforce ID for the node and return TRUE.
    salesforce_api_id_save('node', $node->nid, $sfid, $name, 'import');
  }
  module_invoke_all('salesforce_api_post_import', $node, $name, $sf_data, $create);
  unset($node->sf_node_skip_export);

  return $node->nid;
}

/**
 * Implements hook_default_salesforce_field_maps
 *
 */
function sf_node_default_salesforce_field_maps($drupal = NULL, $sf = NULL) {
  return array('salesforce_api_default_node_page_campaign_field_map' =>
  (object)array(
      'disabled' => FALSE,
      'name' => 'salesforce_api_default_node_page_campaign_field_map',
      'automatic' => SALESFORCE_AUTO_SYNC_OFF,
      'drupal' => 'node_page',
      'salesforce' => 'Campaign',
      'fields' => array('Name' => 'title', 'Description' => 'body'),
      'description' => 'This is a simple example fieldmap to get you started using the Salesforce API.',
    ));
}

/**
 * Implementation of hook_views_api().
 */
function sf_node_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'sf_node') . '/includes',
  );
}
