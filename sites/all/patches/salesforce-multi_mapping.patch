diff --git a/salesforce_api/salesforce_api.module b/salesforce_api/salesforce_api.module
index e9a5f2b..12fa97f 100644
--- a/salesforce_api/salesforce_api.module
+++ b/salesforce_api/salesforce_api.module
@@ -1096,15 +1096,32 @@ function salesforce_api_fieldmap_export_create($name, $drupal_data = NULL) {
  */
 function salesforce_api_id_load($type, $id) {
   // Query the main ID table for the associated data.
-  $result = db_query("SELECT sfid, name FROM {salesforce_object_map} WHERE drupal_type = '%s' AND oid = %d", $type, $id);
-
-  // Return an empty array if no data was found.
-  if (!$data = db_fetch_object($result)) {
-    return (object)array('sfid' => NULL, 'name' => NULL);
+  $result = db_query("SELECT sfid, name FROM {salesforce_object_map} WHERE drupal_type = '%s' AND oid = %d ORDER BY created ASC", $type, $id);
+
+  // List of the modules modified to use multiple mappings.
+  $types_with_multi = array('node');
+  
+  if (in_array($type, $types_with_multi)) {
+  
+    if (!$result) {
+      return NULL;
+    }
+    $data = array();
+    while ($row = db_fetch_object($result)) {
+      $data[$row->name] = $row;
+    }
+    return $data;
   }
   else {
-    // Otherwise return the Salesforce object type and ID.
-    return $data;
+    // Original handling.
+    // Return an empty array if no data was found.
+    if (!$data = db_fetch_object($result)) {
+      return (object)array('sfid' => NULL, 'name' => NULL);
+    }
+    else {
+      // Otherwise return the Salesforce object type and ID.
+      return $data;
+    }
   }
 }
 
@@ -1164,11 +1181,11 @@ function salesforce_api_id_save($drupal_type = NULL, $oid = NULL, $sfid = NULl,
     // is being performed
     ($op_type == 'export') ? $record->last_export = time() : $record->last_import = time();
     $record->sfid = $sfid;
-    $existing_record = db_fetch_array(db_query("SELECT oid, drupal_type, name, sfid, last_import, last_export, created FROM {salesforce_object_map} WHERE drupal_type = '%s' AND oid = %d", $drupal_type, $oid));
+    $existing_record = db_fetch_array(db_query("SELECT oid, drupal_type, name, sfid, last_import, last_export, created FROM {salesforce_object_map} WHERE drupal_type = '%s' AND oid = %d AND name = '%s'", $drupal_type, $oid, $name));
 
     if ($existing_record['sfid']) {
       // Update the record
-      if (drupal_write_record('salesforce_object_map', $record, array('drupal_type', 'oid'))) {
+      if (drupal_write_record('salesforce_object_map', $record, array('drupal_type', 'oid', 'name'))) {
         salesforce_api_log(SALESFORCE_LOG_ALL, 'On !op, successfully re-saved mapping between Drupal !type !oid and Salesforce ID !sfid with fieldmap !name', array('!op' => $op_type, '!type' => $drupal_type, '!oid' => $oid, '!sfid' => $sfid, '!name' => $name));
         return TRUE;
       }
diff --git a/sf_contrib/sf_contrib.module b/sf_contrib/sf_contrib.module
index 3563db5..610a4c4 100644
--- a/sf_contrib/sf_contrib.module
+++ b/sf_contrib/sf_contrib.module
@@ -225,6 +225,10 @@ function _sf_node_export_cck_nodereference($node, $fieldname, $drupal_field_defi
   $sfid = '';
   if ($nid = $node->{$fieldname}[0]['nid']) {
     $sf_data = salesforce_api_id_load('node', $nid);
+
+    // Use the first
+    $sf_data = array_shift($sf_data);
+
     $sfid = isset($sf_data->sfid) ? $sf_data->sfid : '';
   }
   return $sfid;
@@ -237,6 +241,10 @@ function _sf_node_import_cck_nodereference(&$node, $drupal_fieldname, $drupal_fi
   }
   list($drupal_fieldname, $dummy) = explode(':', $drupal_fieldname, 2);
   $node->{$drupal_fieldname}[0]['nid'] = salesforce_api_get_id_with_sfid($sf_data->{$sf_fieldname});
+  // API sends back 18 character ID. We stored 15 character ID.
+  if (empty($node->{$drupal_fieldname}[0]['nid']) && strlen($sf_data->{$sf_fieldname}) == 18) {
+    $node->{$drupal_fieldname}[0]['nid'] = salesforce_api_get_id_with_sfid(substr($sf_data->{$sf_fieldname}, 0, 15));
+  }
 }
 
 // Export sfid of referenced user
@@ -334,7 +342,7 @@ function _sf_contrib_export_location($source, $fieldname, $drupal_field_definiti
 
   // Primary not set, so make first location primary.
   $source->locations[0]['is_primary'] = 1;
-  $criteria = array($key => $source->{$key});
+  $criteria = array($key => $source->{$key}, 'vid' => $source->vid); //$criteria = array($key => $source->{$key});
   location_save_locations($source->locations, $criteria);
 
   return $source->locations[0][$fieldname];
@@ -349,7 +357,7 @@ function _sf_contrib_import_location(&$object, $drupal_fieldname, $drupal_field_
   if (empty($object->locations)) {
     $object->locations = array();
   }
-  foreach ($object->locations as $location) {
+  foreach ($object->locations as &$location) {
     if ($location['is_primary'] == 1) {
       $location[$drupal_fieldname] = $sf_data->{$sf_fieldname};
       return;
diff --git a/sf_node/sf_node.module b/sf_node/sf_node.module
index a38d99b..d90c5ac 100644
--- a/sf_node/sf_node.module
+++ b/sf_node/sf_node.module
@@ -19,6 +19,15 @@ function sf_node_menu() {
     'access arguments' => array(1),
     'type' => MENU_LOCAL_TASK,
   );
+  
+  $items['node/%node/salesforce/%'] = array(
+    'title' => 'Salesforce',
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('sf_node_salesforce_form', 1, 3),
+    'access callback' => 'sf_node_salesforce_form_access',
+    'access arguments' => array(1),
+    'type' => MENU_LOCAL_TASK,
+  );
 
   return $items;
 }
@@ -86,35 +95,28 @@ function sf_node_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
       // If this is an update, and the node already has a salesforce mapping,
       // try to load it. If the load fails, we need to fetch the appropriate
       // fieldmap. Either way, we're upserting the salesforce record.
-      $salesforce = (object)array('name' => NULL, 'sfid' => NULL);
       if ($node->nid) {
-        $salesforce = salesforce_api_id_load('node', $node->nid);
-      }
-
-      // If we have an existing link, attempt to load the assoc'd map.
-      if (!empty($salesforce->name)) {
-        $map = salesforce_api_fieldmap_load($salesforce->name);
+        $salesforce_arr = array_replace(salesforce_api_salesforce_field_map_load_by(array('drupal' => 'node_' . $node->type)), salesforce_api_id_load('node', $node->nid));
+        if (!empty($salesforce_arr)) {
+          $maps = array();
+          foreach ($salesforce_arr as $salesforce) {
+            $maps[$salesforce->name] = salesforce_api_fieldmap_load($salesforce->name);
+          }
+        }
       }
 
-      // If the sf link wasn't found, or if it was found but assoc'd to a
-      // non-existent map, grab any maps assoc'd with this node type.
-      if (empty($salesforce->name) || empty($map)) {
+      if (empty($maps)) {
         $maps = salesforce_api_salesforce_field_map_load_by(array('drupal' => 'node_' . $node->type));
         if (empty($maps)) {
           break;
         }
       }
-      // Otherwise assign the single map as an array so we only have to write
-      // the proceeding logic once.
-      else {
-        $maps = array($map->name => $map);
-      }
 
       foreach ($maps as $map) {
         $auto_create = $map->automatic & SALESFORCE_AUTO_SYNC_CREATE;
         $auto_update = $map->automatic & SALESFORCE_AUTO_SYNC_UPDATE;
         if ((!$auto_create && $op == 'insert')
-        || (!$auto_update && $op == 'update')) {
+            || (!$auto_update && $op == 'update')) {
           unset($maps[$map->name]);
         }
       }
@@ -124,25 +126,15 @@ function sf_node_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
         break;
       }
 
-      // Otherwise, use the first fieldmap.
-      $map = reset($maps);
-      $salesforce->name = $map->name;
-
-      // Check if there is more than one fieldmap in the result.
-      if (user_access('administer salesforce') AND next($maps)) {
-        if (!empty($map->description)) {
-          $description = '(' . $map->description . ')';
+      foreach ($maps as $map) {
+        // Finally, export the node to Salesforce.
+        try {
+          sf_node_export($node, $map->name, $salesforce_arr[$map->name]->sfid);
+        }
+        catch (Exception $e) {
+          salesforce_api_log(SALESFORCE_LOG_SOME, 'Exception while attempting to export node: ' . $e->getMessage(), array(), WATCHDOG_ERROR, l('node ' . $node->nid, 'node/' . $node->nid));
         }
-        drupal_set_message(t('Warning: more than one "automatic" salesforce mapping detected. Used fieldmap !map_name @map_description.', array('!map_name' => l($map->name, SALESFORCE_PATH_FIELDMAPS . '/' . $map->name . '/edit'), '@map_description' => $description)), 'warning');
-      }
-
-      // Finally, export the node to Salesforce.
-      try {
-        sf_node_export($node, $salesforce->name, $salesforce->sfid);
-      } catch (Exception $e) {
-        salesforce_api_log(SALESFORCE_LOG_SOME, 'Exception while attempting to export node: ' . $e->getMessage(), array(), WATCHDOG_ERROR, l('node ' . $node->nid, 'node/' . $node->nid));
       }
-      break;
   }
 }
 
@@ -392,13 +384,21 @@ function _sf_node_export_cck_checkbox($source, $field) {
 }
 
 // Displays the Salesforce synchronization form.
-function sf_node_salesforce_form(&$form_state, $node) {
+function sf_node_salesforce_form(&$form_state, $node, $i = 0) {
   // Fail out if the node didn't exist!
   if (!$node->nid) {
     drupal_not_found();
   }
+  
+  $arr = array_keys($node->salesforce);
+  $index = $arr[$i];
+ 
 
   if (isset($form_state['storage']['confirm'])) {
+     $form['index'] = array(
+      '#type' => 'value',
+      '#value' => $index,
+    );
     // ALSO do $form definition here. Your final submit handler (after user clicks Yes, I Confirm) will only see $form_state info defined here. Form you create here passed as param1 to confirm_form
     $form['node'] = array('#type' => 'value', '#value' => $node);
     return confirm_form($form, 'Are you sure you want to unlink this node from Salesforce?', 'node/' . $node->nid . '/salesforce', 'Unlinking this object will remove the connection between the Drupal object and the Salesforce record. This action will not delete the Drupal object or the Salesforce record. This cannot be undone.', 'Unlink', 'Cancel'); //Had better luck leaving off last param 'name'
@@ -408,15 +408,21 @@ function sf_node_salesforce_form(&$form_state, $node) {
   drupal_set_title(check_plain($node->title));
 
   $form = array();
+  
+  $form['index'] = array(
+    '#type' => 'value',
+    '#value' => $index,
+  );
 
   $form['nid'] = array(
     '#type' => 'value',
     '#value' => $node->nid,
   );
-
-  if ($node->salesforce->sfid) {
+  
+  
+  if ($node->salesforce[$index]->sfid) {
     // Retrieve the object from Salesforce.
-    $sf_data = salesforce_api_retrieve(array($node->salesforce->sfid), $node->salesforce->name);
+    $sf_data = salesforce_api_retrieve(array($node->salesforce[$index]->sfid), $node->salesforce[$index]->name);
     // Check to see if sf_data is an array of objects
     if (is_array($sf_data) && count($sf_data) > 0) {
       $sf_data = $sf_data[0];
@@ -424,18 +430,18 @@ function sf_node_salesforce_form(&$form_state, $node) {
     // If $sf_data is empty, we assume the record is deleted. retrieve() does
     // not return the ENTITY_IS_DELETED error that upsert() does.
     if (!$sf_data && SALESFORCE_DELETED_POLICY_UPSERT == variable_get('salesforce_api_entity_deleted_policy', SALESFORCE_DELETED_POLICY_UPSERT)) {
-      drupal_set_message(t('Unable to retrieve Salesforce data for record !sfid. Drupal and Salesforce records have been unlinked.', array('!sfid' => $node->salesforce->sfid)), 'warning');
+      drupal_set_message(t('Unable to retrieve Salesforce data for record !sfid. Drupal and Salesforce records have been unlinked.', array('!sfid' => $node->salesforce[$index]->sfid)), 'warning');
       // Unlink the object
-      salesforce_api_id_unlink(array('oid' => $node->nid, 'name' => $node->salesforce->name));
+      salesforce_api_id_unlink(array('oid' => $node->nid, 'name' => $node->salesforce[$index]->name));
       $node = node_load($node->nid, NULL, TRUE);
     }
     elseif (!$sf_data) {
-      drupal_set_message(t('Unable to retrieve Salesforce data for record !sfid.', array('!sfid' => $node->salesforce->sfid)), 'warning');
+      drupal_set_message(t('Unable to retrieve Salesforce data for record !sfid.', array('!sfid' => $node->salesforce[$index]->sfid)), 'warning');
     }
   }
 
   // Display an export button if the node hasn't been exported before.
-  if (!$node->salesforce->sfid) {
+  if (!$node->salesforce[$index]->sfid) {
     $form['export'] = array(
       '#type' => 'fieldset',
       '#title' => t('Export node to Salesforce'),
@@ -485,17 +491,17 @@ function sf_node_salesforce_form(&$form_state, $node) {
     // Otherwise add synchronization information.
     $form['sfid'] = array(
       '#type' => 'value',
-      '#value' => $node->salesforce->sfid,
+      '#value' => $node->salesforce[$index]->sfid,
     );
     $form['fieldmap'] = array(
       '#type' => 'value',
-      '#value' => $node->salesforce->name,
+      '#value' => $node->salesforce[$index]->name,
     );
 
     // Load the fieldmap data.
-    $map = salesforce_api_fieldmap_load($node->salesforce->name);
+    $map = salesforce_api_fieldmap_load($node->salesforce[$index]->name);
     $sf_object_definition = salesforce_api_fieldmap_objects_load('salesforce', $map->salesforce);
-    $export_data = salesforce_api_fieldmap_export_create($node->salesforce->name, $node);
+    $export_data = salesforce_api_fieldmap_export_create($node->salesforce[$index]->name, $node);
 
     $header = array(t('Field name'), t('Drupal @type value', array('@type' => salesforce_api_fieldmap_object_label('drupal', $map->drupal))), t('Salesforce @type value', array('@type' => salesforce_api_fieldmap_object_label('salesforce', $map->salesforce))));
     $rows = array();
@@ -511,7 +517,7 @@ function sf_node_salesforce_form(&$form_state, $node) {
     $form['mapped'] = array(
       '#type' => 'fieldset',
       '#title' => t('Mapped field values'),
-      '#description' => t('<a href="!url">Edit this fieldmap</a>.', array('!url' => url(SALESFORCE_PATH_FIELDMAPS .'/'. $node->salesforce->name .'/edit'))),
+      '#description' => t('<a href="!url">Edit this fieldmap</a>.', array('!url' => url(SALESFORCE_PATH_FIELDMAPS .'/'. $node->salesforce[$index]->name .'/edit'))),
     );
     $form['mapped']['fieldmap_values'] = array(
       '#value' => theme('table', $header, $rows),
@@ -594,6 +600,7 @@ function sf_node_salesforce_form(&$form_state, $node) {
 }
 
 function sf_node_salesforce_form_submit($form, &$form_state) {
+  $index = $form_state['values']['index'];
   switch ($form_state['values']['op']) {
     // Export the node to Salesforce.
     case t('Export node'):
@@ -631,8 +638,8 @@ function sf_node_salesforce_form_submit($form, &$form_state) {
       else {
         unset($form_state['storage']['confirm']);
         $node = $form_state['values']['node'];
-        salesforce_api_id_unlink(array('oid' => $node->nid, 'name' => $node->salesforce->name));
-        drupal_set_message(t('The node !nid has been unlinked from Salesforce !sfid.', array('!nid' => $node->nid, '!sfid' => $node->salesforce->sfid)));
+        salesforce_api_id_unlink(array('oid' => $node->nid, 'name' => $node->salesforce[$index]->name));
+        drupal_set_message(t('The node !nid has been unlinked from Salesforce !sfid.', array('!nid' => $node->nid, '!sfid' => $node->salesforce[$index]->sfid)));
       }
       break;
   }
@@ -677,7 +684,7 @@ function sf_node_export($node, $name, $sfid = NULL) {
     $matches = salesforce_api_search_for_duplicates('export', 'node', $node, $name);
     if (!empty($matches)) {
       $sfid = reset($matches);
-      $node->salesforce = array('sfid' => $sfid, 'name' => $name);
+      $node->salesforce[$name] = array('sfid' => $sfid, 'name' => $name);
       salesforce_api_id_save('node', $node->nid, $sfid, $name, 'export');
       $node = node_load($node->nid, NULL, TRUE);
     }
@@ -728,7 +735,7 @@ function sf_node_export($node, $name, $sfid = NULL) {
     && SALESFORCE_DELETED_POLICY_UPSERT == variable_get('salesforce_api_entity_deleted_policy', SALESFORCE_DELETED_POLICY_UPSERT)) {
       // If the entity is deleted, unlink ALL the linked drupal objects.
       salesforce_api_id_unlink(array('sfid' => $object->Id));
-      $node->salesforce->sfid = $object->Id = NULL;
+      $node->salesforce[$map->name]->sfid = $object->Id = NULL;
 
       // Look for any matching records which we might want to update instead of
       // creating duplicates. Assume that salesforce_api_search_for_duplicates()
@@ -736,7 +743,7 @@ function sf_node_export($node, $name, $sfid = NULL) {
       $matches = salesforce_api_search_for_duplicates('export', 'node', $node, $name);
       if (!empty($matches)) {
         $sfid = reset($matches);
-        $node->salesforce->sfid = $sfid;
+        $node->salesforce[$map->name]->sfid = $sfid;
       }
 
       salesforce_api_log(SALESFORCE_LOG_SOME, 'Salesforce entity deleted. Attempting to unlink and upsert. <pre>%response</pre>', array('%response' => print_r($response, 1)), WATCHDOG_ERROR, l('node ' . $node->nid, 'node/' . $node->nid));
@@ -809,7 +816,7 @@ function sf_node_import($sf_data, $name, $nid = NULL, $options = array()) {
 
   // Load the fieldmap data.
   $map = salesforce_api_fieldmap_load($name);
-
+  
   // Load the object definitions.
   $drupal_object_definition = salesforce_api_fieldmap_objects_load('drupal', $map->drupal);
   $salesforce_object_definition = salesforce_api_fieldmap_objects_load('salesforce', $map->salesforce);
